// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.luciaaldana.eccomerceapp.`data`.product.dto

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class ProductDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ProductDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("_id", "name", "description",
      "imageUrl", "price", "category", "hasDrink", "createdAt", "updatedAt")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "price")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "category")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "hasDrink")

  @Volatile
  private var constructorRef: Constructor<ProductDto>? = null

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("ProductDto").append(')') }

  public override fun fromJson(reader: JsonReader): ProductDto {
    var id: String? = null
    var name: String? = null
    var description: String? = null
    var imageUrl: String? = null
    var price: Double? = null
    var category: String? = null
    var hasDrink: Boolean? = null
    var createdAt: String? = null
    var updatedAt: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "_id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        3 -> imageUrl = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("imageUrl",
            "imageUrl", reader)
        4 -> price = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("price", "price",
            reader)
        5 -> {
          category = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          hasDrink = nullableBooleanAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> createdAt = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("createdAt",
            "createdAt", reader)
        8 -> updatedAt = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("updatedAt",
            "updatedAt", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffff9f.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  ProductDto(
          id = id ?: throw Util.missingProperty("id", "_id", reader),
          name = name ?: throw Util.missingProperty("name", "name", reader),
          description = description ?: throw Util.missingProperty("description", "description",
              reader),
          imageUrl = imageUrl ?: throw Util.missingProperty("imageUrl", "imageUrl", reader),
          price = price ?: throw Util.missingProperty("price", "price", reader),
          category = category,
          hasDrink = hasDrink,
          createdAt = createdAt ?: throw Util.missingProperty("createdAt", "createdAt", reader),
          updatedAt = updatedAt ?: throw Util.missingProperty("updatedAt", "updatedAt", reader)
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<ProductDto> = this.constructorRef ?:
          ProductDto::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          String::class.java, String::class.java, Double::class.javaPrimitiveType,
          String::class.java, Boolean::class.javaObjectType, String::class.java, String::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          id ?: throw Util.missingProperty("id", "_id", reader),
          name ?: throw Util.missingProperty("name", "name", reader),
          description ?: throw Util.missingProperty("description", "description", reader),
          imageUrl ?: throw Util.missingProperty("imageUrl", "imageUrl", reader),
          price ?: throw Util.missingProperty("price", "price", reader),
          category,
          hasDrink,
          createdAt ?: throw Util.missingProperty("createdAt", "createdAt", reader),
          updatedAt ?: throw Util.missingProperty("updatedAt", "updatedAt", reader),
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: ProductDto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("_id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("imageUrl")
    stringAdapter.toJson(writer, value_.imageUrl)
    writer.name("price")
    doubleAdapter.toJson(writer, value_.price)
    writer.name("category")
    nullableStringAdapter.toJson(writer, value_.category)
    writer.name("hasDrink")
    nullableBooleanAdapter.toJson(writer, value_.hasDrink)
    writer.name("createdAt")
    stringAdapter.toJson(writer, value_.createdAt)
    writer.name("updatedAt")
    stringAdapter.toJson(writer, value_.updatedAt)
    writer.endObject()
  }
}
